% This is a template to create your midterm report as a pdf.
% Just fill in the areas and run pdflatex
% For more information on LaTeX documents consult The (Not So
% Short Introduction to LateX2e
%
% to compile your report use the command
% pdflatex reportdocument.tex
%
% if you have \ref useage or other cross links
% you will have to run the above command again

% set 12pt font
\documentclass[12pt]{article}
% some useful packages
\usepackage[pdftex]{graphicx,color}
\usepackage{fullpage}
\def\baselinestretch{1.5} % line spaceing
% set title
\title{ECE 437L Midterm Report}
% fill in the blanks
\author{Pooja Kale (mg273) \\
        Brian Rieder (mg267) \\
        TA: Nick Pfister}
% \today will put todays date
% or you can manually put the date in
\date{October 14, 2016}
% cover page is a page by itself

\begin{document}
  \maketitle

% executive overview remember
% this should be on a page by itself
  \section{Executive Overview}
  
   This report compares the performance of a single cycle processor and a pipeline processor on a merge-sort assembly (asm) file, and analyzes the results. The comparisons of the two processor designs will be based on the maximum clock frequencies, average instructions per clock cycle, the performance of the designs in MIPS and the FPGA resources required for each design. The comparisons will be further tested using variable latency RAM in order to ensure independence from memory timing. The single cycle processor is a simple design that takes in one instruction at a time to decode it and produce a result. This design does not have any instruction dependencies eliminating the possibility of instruction or data hazards. The pipeline processor is a more intricate design with five stages: instruction fetch, instruction decode, execute, memory, and write-back. This allows the design to process five instructions simultaneously within different stages of their execution.  
\\ 
\\
  The two designs will be tested using the merge-sort assembly file. The benefit of using the mergersort assembly program, is it includes all possible assembly instructions that both processors can decode. The merge-sort file also includes multiple branches to test branch logic in both designs. The order of instructions in the program will test if the pipeline handles data hazards, and structural hazards with inserting stalls or bubbles in the correct places and flushing data at the right time. The execution results show that the pipeline processor is the favorable design because it increases the throughput (or decreases the execution time) as compared to the single cycle. While the single cycle handles one instruction at a time the pipeline processor design processes 5 instructions in different stages in one cycle. 

  \section{Processor Design}

% Uncomment after you create the block diagram graphic.
  \begin{figure}[hp]
    \begin{center}
      \includegraphics[width=\textwidth]{SingleCycleProcessor.jpg}
    % You can change the type of figure to a .png, .pdf, .jpg, .mps
    \end{center}

    \caption{Single Cycle Block Diagram}
		\label{fig:processor}
  \end{figure}


  Text for discussing your designs %in Figure \ref{fig:processor}

  \begin{figure}[hp]
    \begin{center}
      \includegraphics[width=\textwidth]{PipelineProcessor1.jpg}
    % You can change the type of figure to a .png, .pdf, .jpg, .mps
    \end{center}

    \caption{Single Cycle Block Diagram}
    \label{fig:processor}
  \end{figure}


  Text for discussing your designs %in Figure \ref{fig:processor}

	\section{Processor Debug}

	Fix the processor!!!

  \section{Results}

  \begin{table}[!hbp]

    \begin{tabular}{|p{.25\textwidth}|p{.75\textwidth}|}
      \hline
      Throughput & ??/??=??instructions/ns \\ \hline
      Latency & ??*??=??ns/instruction \\ \hline
    \end{tabular}

    \caption{Processor Specs}
		\label{tb:procspec}
  \end{table}

  Text for your results

  \section{Conclusion}

  Text for your conclusion

  \section{Contributions}

  Text for individual contributions

\end{document}
